version: '3.8'

networks:
  customer-net:
    name: customer-net

services:
  customer-api:
    build:
      context: './customer-api/'
      dockerfile: Dockerfile
    image: 'customer-api:0.0.1-SNAPSHOT'
    container_name: customer-api
    networks:
      - customer-net
    ports:
      - 8080:8080
    environment:
      WAIT_HOSTS: 'postgres:5432'
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://postgres:5432/postgres'
    depends_on:
      - kafka-server
      - postgres-server
  customer-listener:
    build:
      context: './customer-listener/'
      dockerfile: Dockerfile
    image: 'customer-listener:0.0.1-SNAPSHOT'
    container_name: customer-listener
    networks:
      - customer-net
    ports:
      - 8081:8080
#    environment:
#      WAIT_HOSTS: 'postgres:5432'
#      SPRING_DATASOURCE_URL: 'jdbc:postgresql://postgres:5432/postgres'
    depends_on:
      - customer-api
      - kafka-server
      - postgres-server
  postgres-server:
    image: debezium/postgres:13-alpine
    container_name: customer-postgres
    hostname: postgres
    networks:
      - customer-net
    ports:
      - 5432:5432
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=secret'
  zookeeper-server:
    image: debezium/zookeeper:latest
    restart: unless-stopped
    container_name: customer-zookeeper
    hostname: zookeeper-serer
    networks:
      - customer-net
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ALLOW_ANONYMOUS_LOGIN: 'yes'
      ZOO_SERVERS: 'server.1:zookeeper:2888:3888'
      ZOO_PORT: 2181
      ZOO_MY_ID: '1'
  kafka-server:
    image: debezium/kafka:latest
    container_name: customer-kafka
    hostname: kafka-server
    networks:
      - customer-net
    ports:
      - 9092:9092
      - 9093:9093
    links:
      - zookeeper-server
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper-server:2181'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-server:9092,PLAINTEXT_HOST://localhost:9093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,PLAINTEXT_HOST://:9093'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      ZOOKEEPER_CONNECT: 'zookeeper-server:2181'
#      - 'LISTENERS=INTERNAL://:9092,EXTERNAL://:9093'
#      - 'ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:9093'
#      - 'KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL'
#      - 'KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
#      - 'ADVERTISED_HOST_NAME=localhost'
    depends_on:
      - zookeeper-server
  kafka-connect:
    image: debezium/connect:latest
    container_name: customer-kafka-connect
    hostname: connect
    networks:
      - customer-net
    ports:
      - 8083:8083
    links:
      - postgres-server
      - zookeeper-server
      - kafka-server
    environment:
      GROUP_ID: 1
      REST_PORT: 8083
      REST_ADVERTISED_HOST_NAME: kafka-connect
      BOOTSTRAP_SERVERS: 'kafka-server:9092'
      CONFIG_STORAGE_TOPIC: my-connect-configs
      OFFSET_STORAGE_TOPIC: my-connect-offsets
      STATUS_STORAGE_TOPIC: my_source_connect_statuses
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
#      - 'ADVERTISED_HOST_NAME=$$(echo $$DOCKER_HOST | cut -f3 -d’/’ | cut -f1 -d’:’)'
    depends_on:
      - postgres-server
      - zookeeper-server
      - kafka-server