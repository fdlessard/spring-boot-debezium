version: '3.9'

networks:
  customer-net:
    name: customer-net

services:
  customer-api:
    build:
      context: './customer-api/'
      dockerfile: Dockerfile
    image: 'customer-api:0.0.1-SNAPSHOT'
    container_name: customer-api
    networks:
      - customer-net
    ports:
      - 8080:8080
    environment:
      WAIT_HOSTS: 'postgres:5432'
      SPRING_DATASOURCE_URL: 'jdbc:postgresql://postgres:5432/postgres'
    depends_on:
      - connect-server
      - kafka-server
      - postgres-server
    command: [--rm]
#  cdc-listener:
#    build:
#      context: './cdc-listener/'
#      dockerfile: Dockerfile
#    image: 'cdc-listener:0.0.1-SNAPSHOT'
#    container_name: cdc-listener
#    networks:
#      - customer-net
#    ports:
#      - 8081:8080
#    depends_on:
#      - customer-api
#    command: [--rm]
  postgres-server:
    image: debezium/postgres:13-alpine
    container_name: customer-postgres
    hostname: postgres
    networks:
      - customer-net
    ports:
      - 5432:5432
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_PASSWORD=secret'
  zookeeper-server:
    image: debezium/zookeeper:1.5.2.Final
    restart: unless-stopped
    container_name: customer-zookeeper
    hostname: zookeeper-server
    networks:
      - customer-net
    ports:
      - 2181:2181
      - 2888:2888
      - 3888:3888
  kafka-server:
    image: debezium/kafka:1.5.2.Final
    container_name: customer-kafka
    hostname: kafka-server
    networks:
      - customer-net
    ports:
      - 9092:9092
      - 9093:9093
    links:
      - zookeeper-server
    environment:
      ZOOKEEPER_CONNECT: zookeeper-server:2181
      KAFKA_LISTENERS: 'PLAINTEXT://:9092,PLAINTEXT_HOST://:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka-server:9092,PLAINTEXT_HOST://localhost:9093'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      ADVERTISED_HOST_NAME: localhost
      ADVERTISED_PORT: 9093
      LOG_CLEANUP_POLICY: compact
      TOPIC_CREATION_DEFAULT_CLEANUP_POLICY: compact
    depends_on:
      - zookeeper-server
  connect-server:
    image: debezium/connect:1.5.2.Final
    container_name: customer-connect
    hostname: connect-server
    networks:
      - customer-net
    ports:
      - 8083:8083
    links:
      - postgres-server
      - kafka-server
    environment:
      BOOTSTRAP_SERVERS: kafka-server:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: my-connect-config-storage-topic
      OFFSET_STORAGE_TOPIC: my-connect-offset-storage-topic
      STATUS_STORAGE_TOPIC: my-connect-status-storage-topic
#      CONNECT_TOPIC_CREATION_ENABLE: 'true'
#      TOPIC_CREATION_DEFAULT_CLEANUP_POLICY: compact
#      REST_ADVERTISED_HOST_NAME: connect-server
#      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#      INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
#    depends_on:
#      - postgres-server
#      - kafka-server
  watcher:
    image: debezium/kafka:1.5.2.Final
    container_name: customer-watcher
    hostname: watcher
    networks:
      - customer-net
    links:
      - zookeeper-server
      - kafka-server
      - connect-server
    depends_on:
      - zookeeper-server
      - kafka-server
      - connect-server
    environment:
      KAFKA_BROKER: kafka-server:9092
      ZOOKEEPER_CONNECT: zookeeper-server:2181
    command: [watch-topic, -a, -k, dbserver1.public.customer]